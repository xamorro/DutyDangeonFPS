//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""HumanControls"",
            ""id"": ""369c4273-3eeb-41c7-93f3-bf6c689e2b88"",
            ""actions"": [
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""43ca1d4f-dfc1-4e58-a550-d15ec37a1679"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9fb4c60b-6a07-4a18-9e7f-b5191d8f65f2"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=200,y=200)"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1ab57a7-c140-4a6a-a4f3-2cc246b35a34"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.5,y=0.5)"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // HumanControls
        m_HumanControls = asset.FindActionMap("HumanControls", throwIfNotFound: true);
        m_HumanControls_Camera = m_HumanControls.FindAction("Camera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HumanControls
    private readonly InputActionMap m_HumanControls;
    private List<IHumanControlsActions> m_HumanControlsActionsCallbackInterfaces = new List<IHumanControlsActions>();
    private readonly InputAction m_HumanControls_Camera;
    public struct HumanControlsActions
    {
        private @PlayerController m_Wrapper;
        public HumanControlsActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Camera => m_Wrapper.m_HumanControls_Camera;
        public InputActionMap Get() { return m_Wrapper.m_HumanControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HumanControlsActions set) { return set.Get(); }
        public void AddCallbacks(IHumanControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_HumanControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HumanControlsActionsCallbackInterfaces.Add(instance);
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
        }

        private void UnregisterCallbacks(IHumanControlsActions instance)
        {
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
        }

        public void RemoveCallbacks(IHumanControlsActions instance)
        {
            if (m_Wrapper.m_HumanControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHumanControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_HumanControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HumanControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HumanControlsActions @HumanControls => new HumanControlsActions(this);
    public interface IHumanControlsActions
    {
        void OnCamera(InputAction.CallbackContext context);
    }
}
